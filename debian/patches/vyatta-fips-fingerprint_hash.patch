From: Jan Blunck <jblunck@vyatta.com>
Subject: Split fingerprint hash selection from openssh-6.0p1.fips-revised.patch

This is a port of the OpenSSH upstream patch originally located here:
http://www.openssl.com/export/openssh/openssh-6.0p1.fips-revised.patch
--- a/auth2-hostbased.c
+++ b/auth2-hostbased.c
@@ -197,13 +197,13 @@
 	if (host_status == HOST_OK) {
 		if (key_is_cert(key)) {
 			fp = key_fingerprint(key->cert->signature_key,
-			    SSH_FP_MD5, SSH_FP_HEX);
+			    key_fingerprint_alg(), SSH_FP_HEX);
 			verbose("Accepted certificate ID \"%s\" signed by "
 			    "%s CA %s from %s@%s", key->cert->key_id,
 			    key_type(key->cert->signature_key), fp,
 			    cuser, lookup);
 		} else {
-			fp = key_fingerprint(key, SSH_FP_MD5, SSH_FP_HEX);
+			fp = key_fingerprint(key, key_fingerprint_alg(), SSH_FP_HEX);
 			verbose("Accepted %s public key %s from %s@%s",
 			    key_type(key), fp, cuser, lookup);
 		}
--- a/auth2-pubkey.c
+++ b/auth2-pubkey.c
@@ -323,7 +323,7 @@
 				continue;
 			if (!key_is_cert_authority)
 				continue;
-			fp = key_fingerprint(found, SSH_FP_MD5,
+			fp = key_fingerprint(found, key_fingerprint_alg(),
 			    SSH_FP_HEX);
 			debug("matching CA found: file %s, line %lu, %s %s",
 			    file, linenum, key_type(found), fp);
@@ -366,7 +366,7 @@
 			found_key = 1;
 			debug("matching key found: file %s, line %lu",
 			    file, linenum);
-			fp = key_fingerprint(found, SSH_FP_MD5, SSH_FP_HEX);
+			fp = key_fingerprint(found, key_fingerprint_alg(), SSH_FP_HEX);
 			verbose("Found matching %s key: %s",
 			    key_type(found), fp);
 			xfree(fp);
@@ -393,7 +393,7 @@
 		return 0;
 
 	ca_fp = key_fingerprint(key->cert->signature_key,
-	    SSH_FP_MD5, SSH_FP_HEX);
+	    key_fingerprint_alg(), SSH_FP_HEX);
 
 	if (key_in_file(key->cert->signature_key,
 	    options.trusted_user_ca_keys, 1) != 1) {
--- a/auth.c
+++ b/auth.c
@@ -621,7 +621,7 @@
 		return 1;
 	case 1:
 		/* Key revoked */
-		key_fp = key_fingerprint(key, SSH_FP_MD5, SSH_FP_HEX);
+		key_fp = key_fingerprint(key, key_fingerprint_alg(), SSH_FP_HEX);
 		error("WARNING: authentication attempt with a revoked "
 		    "%s key %s ", key_type(key), key_fp);
 		xfree(key_fp);
--- a/auth-rsa.c
+++ b/auth-rsa.c
@@ -328,7 +328,7 @@
 	 * options; this will be reset if the options cause the
 	 * authentication to be rejected.
 	 */
-	fp = key_fingerprint(key, SSH_FP_MD5, SSH_FP_HEX);
+	fp = key_fingerprint(key, key_fingerprint_alg(), SSH_FP_HEX);
 	verbose("Found matching %s key: %s",
 	    key_type(key), fp);
 	xfree(fp);
--- a/key.c
+++ b/key.c
@@ -70,6 +70,28 @@
 	return cert;
 }
 
+
+enum fp_type key_fingerprint_alg(void)
+{
+    return SSH_FP_MD5;
+}
+
+/*
+ * Returned string lenghts must be less or equal to SSH_FP_TYPE_STRLEN.
+ */
+char *
+key_fingerprint_alg_str(enum fp_type type)
+{
+  switch(type) {
+  case SSH_FP_MD5:
+    return "MD5";
+  case SSH_FP_SHA1:
+    return "SHA-1";
+  default:
+    fatal("%s: unknown key fingerprint hash type selected", __func__);
+  }
+}
+
 Key *
 key_new(int type)
 {
@@ -391,7 +413,8 @@
 }
 
 static char *
-key_fingerprint_hex(u_char *dgst_raw, u_int dgst_raw_len)
+key_fingerprint_hex(u_char *dgst_raw, u_int dgst_raw_len,
+		    enum fp_type dgst_type)
 {
 	char *retval;
 	u_int i;
@@ -404,7 +427,16 @@
 	}
 
 	/* Remove the trailing ':' character */
-	retval[(dgst_raw_len * 3) - 1] = '\0';
+	retval[(dgst_raw_len * 3) - 1] = ' ';
+
+	/* Append hash digest type */
+	{
+	  char hash[SSH_FP_TYPE_STRLEN + 2 + 1];
+	  snprintf(hash, sizeof(hash), "[%s]",
+		   key_fingerprint_alg_str(dgst_type));
+	  strlcat(retval, hash, dgst_raw_len * 3 + SSH_FP_TYPE_STRLEN + 2 + 1);
+	}
+
 	return retval;
 }
 
@@ -489,7 +521,8 @@
 #define	FLDSIZE_Y	(FLDBASE + 1)
 #define	FLDSIZE_X	(FLDBASE * 2 + 1)
 static char *
-key_fingerprint_randomart(u_char *dgst_raw, u_int dgst_raw_len, const Key *k)
+key_fingerprint_randomart(u_char *dgst_raw, u_int dgst_raw_len, const Key *k,
+			  enum fp_type dgst_type)
 {
 	/*
 	 * Chars to be used after each other every time the worm
@@ -556,8 +589,10 @@
 	}
 
 	/* output lower border */
-	*p++ = '+';
-	for (i = 0; i < FLDSIZE_X; i++)
+	i = snprintf(p, FLDSIZE_X, "+--[%s]",
+		     key_fingerprint_alg_str(dgst_type));
+	p += i;
+	for (--i; i < FLDSIZE_X; i++)
 		*p++ = '-';
 	*p++ = '+';
 
@@ -576,13 +611,15 @@
 		fatal("key_fingerprint: null from key_fingerprint_raw()");
 	switch (dgst_rep) {
 	case SSH_FP_HEX:
-		retval = key_fingerprint_hex(dgst_raw, dgst_raw_len);
+		retval = key_fingerprint_hex(dgst_raw, dgst_raw_len,
+					     dgst_type);
 		break;
 	case SSH_FP_BUBBLEBABBLE:
 		retval = key_fingerprint_bubblebabble(dgst_raw, dgst_raw_len);
 		break;
 	case SSH_FP_RANDOMART:
-		retval = key_fingerprint_randomart(dgst_raw, dgst_raw_len, k);
+		retval = key_fingerprint_randomart(dgst_raw, dgst_raw_len, k,
+						   dgst_type);
 		break;
 	default:
 		fatal("key_fingerprint: bad digest representation %d",
--- a/key.h
+++ b/key.h
@@ -102,6 +102,10 @@
 int		 key_write(const Key *, FILE *);
 int		 key_read(Key *, char **);
 u_int		 key_size(const Key *);
+enum fp_type	 key_fingerprint_alg(void);
+
+#define SSH_FP_TYPE_STRLEN 8
+char *		 key_fingerprint_alg_str(enum fp_type);
 
 Key	*key_generate(int, u_int);
 Key	*key_from_private(const Key *);
--- a/ssh-add.c
+++ b/ssh-add.c
@@ -301,7 +301,7 @@
 		    key = ssh_get_next_identity(ac, &comment, version)) {
 			had_identities = 1;
 			if (do_fp) {
-				fp = key_fingerprint(key, SSH_FP_MD5,
+				fp = key_fingerprint(key, key_fingerprint_alg(),
 				    SSH_FP_HEX);
 				printf("%d %s %s (%s)\n",
 				    key_size(key), fp, comment, key_type(key));
--- a/ssh-agent.c
+++ b/ssh-agent.c
@@ -199,7 +199,7 @@
 	char *p;
 	int ret = -1;
 
-	p = key_fingerprint(id->key, SSH_FP_MD5, SSH_FP_HEX);
+	p = key_fingerprint(id->key, key_fingerprint_alg(), SSH_FP_HEX);
 	if (ask_permission("Allow use of key %s?\nKey fingerprint %s.",
 	    id->comment, p))
 		ret = 0;
--- a/sshconnect2.c
+++ b/sshconnect2.c
@@ -653,7 +653,7 @@
 		    key->type, pktype);
 		goto done;
 	}
-	fp = key_fingerprint(key, SSH_FP_MD5, SSH_FP_HEX);
+	fp = key_fingerprint(key, key_fingerprint_alg(), SSH_FP_HEX);
 	debug2("input_userauth_pk_ok: fp %s", fp);
 	xfree(fp);
 
@@ -1320,7 +1320,7 @@
 	int have_sig = 1;
 	char *fp;
 
-	fp = key_fingerprint(id->key, SSH_FP_MD5, SSH_FP_HEX);
+	fp = key_fingerprint(id->key, key_fingerprint_alg(), SSH_FP_HEX);
 	debug3("sign_and_send_pubkey: %s %s", key_type(id->key), fp);
 	xfree(fp);
 
--- a/sshconnect.c
+++ b/sshconnect.c
@@ -805,8 +805,9 @@
 				    "key for IP address '%.128s' to the list "
 				    "of known hosts.", type, ip);
 		} else if (options.visual_host_key) {
-			fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX);
-			ra = key_fingerprint(host_key, SSH_FP_MD5,
+			fp = key_fingerprint(host_key, key_fingerprint_alg(),
+			    SSH_FP_HEX);
+			ra = key_fingerprint(host_key, key_fingerprint_alg(),
 			    SSH_FP_RANDOMART);
 			logit("Host key fingerprint is %s\n%s\n", fp, ra);
 			xfree(ra);
@@ -846,8 +847,9 @@
 			else
 				snprintf(msg1, sizeof(msg1), ".");
 			/* The default */
-			fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX);
-			ra = key_fingerprint(host_key, SSH_FP_MD5,
+			fp = key_fingerprint(host_key, key_fingerprint_alg(),
+			    SSH_FP_HEX);
+			ra = key_fingerprint(host_key, key_fingerprint_alg(),
 			    SSH_FP_RANDOMART);
 			msg2[0] = '\0';
 			if (options.verify_host_key_dns) {
@@ -1112,7 +1114,7 @@
 	char *fp;
 	Key *plain = NULL;
 
-	fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX);
+	fp = key_fingerprint(host_key, key_fingerprint_alg(), SSH_FP_HEX);
 	debug("Server host key: %s %s", key_type(host_key), fp);
 	xfree(fp);
 
@@ -1223,8 +1225,8 @@
 			continue;
 		if (!lookup_key_in_hostkeys_by_type(hostkeys, type[i], &found))
 			continue;
-		fp = key_fingerprint(found->key, SSH_FP_MD5, SSH_FP_HEX);
-		ra = key_fingerprint(found->key, SSH_FP_MD5, SSH_FP_RANDOMART);
+		fp = key_fingerprint(found->key, key_fingerprint_alg(), SSH_FP_HEX);
+		ra = key_fingerprint(found->key, key_fingerprint_alg(), SSH_FP_RANDOMART);
 		logit("WARNING: %s key found for host %s\n"
 		    "in %s:%lu\n"
 		    "%s key fingerprint %s.",
@@ -1244,8 +1246,9 @@
 warn_changed_key(Key *host_key)
 {
 	char *fp;
+	const char *type = key_type(host_key);
 
-	fp = key_fingerprint(host_key, SSH_FP_MD5, SSH_FP_HEX);
+	fp = key_fingerprint(host_key, key_fingerprint_alg(), SSH_FP_HEX);
 
 	error("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
 	error("@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @");
@@ -1254,7 +1257,7 @@
 	error("Someone could be eavesdropping on you right now (man-in-the-middle attack)!");
 	error("It is also possible that a host key has just been changed.");
 	error("The fingerprint for the %s key sent by the remote host is\n%s.",
-	    key_type(host_key), fp);
+	      type, fp);
 	error("Please contact your system administrator.");
 
 	xfree(fp);
--- a/ssh-keygen.c
+++ b/ssh-keygen.c
@@ -749,7 +749,7 @@
 	enum fp_type fptype;
 	struct stat st;
 
-	fptype = print_bubblebabble ? SSH_FP_SHA1 : SSH_FP_MD5;
+	fptype = print_bubblebabble ? SSH_FP_SHA1 : key_fingerprint_alg();
 	rep =    print_bubblebabble ? SSH_FP_BUBBLEBABBLE : SSH_FP_HEX;
 
 	if (!have_identity)
@@ -761,7 +761,7 @@
 	public = key_load_public(identity_file, &comment);
 	if (public != NULL) {
 		fp = key_fingerprint(public, fptype, rep);
-		ra = key_fingerprint(public, SSH_FP_MD5, SSH_FP_RANDOMART);
+		ra = key_fingerprint(public, key_fingerprint_alg(), SSH_FP_RANDOMART);
 		printf("%u %s %s (%s)\n", key_size(public), fp, comment,
 		    key_type(public));
 		if (log_level >= SYSLOG_LEVEL_VERBOSE)
@@ -827,7 +827,7 @@
 		}
 		comment = *cp ? cp : comment;
 		fp = key_fingerprint(public, fptype, rep);
-		ra = key_fingerprint(public, SSH_FP_MD5, SSH_FP_RANDOMART);
+		ra = key_fingerprint(public, key_fingerprint_alg(), SSH_FP_RANDOMART);
 		printf("%u %s %s (%s)\n", key_size(public), fp,
 		    comment ? comment : "no comment", key_type(public));
 		if (log_level >= SYSLOG_LEVEL_VERBOSE)
@@ -948,10 +948,10 @@
 		enum fp_type fptype;
 		char *fp, *ra;
 
-		fptype = print_bubblebabble ? SSH_FP_SHA1 : SSH_FP_MD5;
+		fptype = print_bubblebabble ? SSH_FP_SHA1 : key_fingerprint_alg();
 		rep =    print_bubblebabble ? SSH_FP_BUBBLEBABBLE : SSH_FP_HEX;
 		fp = key_fingerprint(public, fptype, rep);
-		ra = key_fingerprint(public, SSH_FP_MD5, SSH_FP_RANDOMART);
+		ra = key_fingerprint(public, key_fingerprint_alg(), SSH_FP_RANDOMART);
 		printf("%u %s %s (%s)\n", key_size(public), fp, name,
 		    key_type(public));
 		if (log_level >= SYSLOG_LEVEL_VERBOSE)
@@ -1818,7 +1818,7 @@
 		fatal("%s is not a certificate", identity_file);
 	v00 = key->type == KEY_RSA_CERT_V00 || key->type == KEY_DSA_CERT_V00;
 
-	key_fp = key_fingerprint(key, SSH_FP_MD5, SSH_FP_HEX);
+	key_fp = key_fingerprint(key, key_fingerprint_alg(), SSH_FP_HEX);
 	ca_fp = key_fingerprint(key->cert->signature_key,
 	    SSH_FP_MD5, SSH_FP_HEX);
 
@@ -2362,8 +2362,9 @@
 	fclose(f);
 
 	if (!quiet) {
-		char *fp = key_fingerprint(public, SSH_FP_MD5, SSH_FP_HEX);
-		char *ra = key_fingerprint(public, SSH_FP_MD5,
+		char *fp = key_fingerprint(public, key_fingerprint_alg(),
+		    SSH_FP_HEX);
+		char *ra = key_fingerprint(public, key_fingerprint_alg(),
 		    SSH_FP_RANDOMART);
 		printf("Your public key has been saved in %s.\n",
 		    identity_file);
